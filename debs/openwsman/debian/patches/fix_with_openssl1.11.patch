Description: Fix FTBFS with openssl 1.11
 Fixes FTBFS with openssl 1.11.
Author: Andres Rodriguez <andreserl@ubuntu.com>
Origin: other, https://github.com/ajeetraina/openwsman/commits/master

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2018-03-08

--- openwsman-2.6.5.orig/README.md
+++ openwsman-2.6.5/README.md
@@ -1,3 +1,76 @@
+# Pre-requisite
+
+
+```
+# Install autoconf (Automatic configure script builder) and associated dependencies
+
+debian:~$ sudo apt-get install autoconf automake autotools-dev libsigsegv2 m4
+```
+
+# Install Cmake and associated dependencies
+```
+debian:~$ sudo apt-get install cmake cmake-data libjsoncpp1
+```
+
+# Install Default JDK and associated dependencies
+```
+debian:~$ sudo apt-get install ca-certificates-java default-jdk default-jdk-headless default-jre default-jre-headless fonts-dejavu-extra java-common libbonobo2-0 libbonobo2-common libgif7 libgnome-2-0 libgnome2-common libgnomevfs2-0 libgnomevfs2-common liborbit-2-0 openjdk-8-jdk openjdk-8-jdk-headless openjdk-8-jre openjdk-8-jre-headless
+```
+# Install PAM (pluggable authentication module) development module
+```
+debian:~$ sudo apt-get install libpam0g-dev
+```
+
+# Install Curl OpenSSL Development Libraries
+```
+debian:~$ sudo apt-get install libcurl4-openssl-dev
+```
+# Install development files for the GNOME XML Libraries
+```
+debian:~$ sudo apt-get install icu-devtools libicu-dev libxml2-dev
+```
+# Install SWIG (Simplified Wrapper & Interface Generator) for wrapping C/C++ functions for use with a script generator
+```
+debian:~$ sudo apt-get install swig3.0
+```
+# Install sblim-sfcc (Small Footprint CIM Client) libraries
+```
+debian:~$ sudo apt-get install libcimcclient0 libcimcclient0-dev
+```
+# Install python development libraries
+```
+debian:~$ sudo apt-get install libpython-dev
+```
+
+Download the latest committed release openwsman-2.6.3.tar.gz source tar ball from the github url and extract it:
+```
+debian:~$ cd /tmp
+
+debian:/tmp$ wget https://github.com/Openwsman/openwsman/archive/v2.6.3.tar.gz -O /tmp/openwsman-2.6.3.tar.gz
+
+debian:/tmp$ tar –zxvf openwsman-2.6.3.tar.gz
+
+```
+Let’s disable the Ruby bindings so that you don’t run into Ruby installations errors. In order to do so, please navigate to openwsman-2.6.3 directory and edit the top-level CMakeLists.txt file and set the BUILD_RUBY option to NO.
+```
+debian:/tmp$ cd openwsman-2.6.3
+
+debian:/tmp/openwsman-2.6.3$ perl –p –i –e "s/(\\$\{CURL_LIBRARIES\})/\1 ssl crypto/g" src/lib/CMakeLists.txt
+
+debian:/tmp/openwsman-2.6.3$ vi CMakeLists.txt
+```
+#Find and edit the BUILD_RUBY target option to NO:
+``
+OPTION( BUILD_RUBY “Build Ruby Bindings” YES)
+
+                           To
+
+OPTION( BUILD_RUBY “Build Ruby Bindings” NO)
+```
+
+
+
+
 # How to compile and run openwsman from GIT ? 
 
 After checking out the project from git, create a build directory
--- openwsman-2.6.5.orig/src/lib/wsman-curl-client-transport.c
+++ openwsman-2.6.5/src/lib/wsman-curl-client-transport.c
@@ -241,12 +241,20 @@ write_handler( void *ptr, size_t size, s
 static int ssl_certificate_thumbprint_verify_callback(X509_STORE_CTX *ctx, void *arg)
 {
 	unsigned char *thumbprint = (unsigned char *)arg;
-	X509 *cert = ctx->cert;
 	EVP_MD                                  *tempDigest;
 
 	unsigned char   tempFingerprint[EVP_MAX_MD_SIZE];
 	unsigned int      tempFingerprintLen;
 	tempDigest = (EVP_MD*)EVP_sha1( );
+
+	#if OPENSSL_VERSION_NUMBER < 0x10100000L
+	X509 *cert = ctx->cert;
+	#else
+	X509 *cert = X509_STORE_CTX_get_current_cert(ctx);
+	#endif
+	if(!cert)
+		return 0;
+
 	if ( X509_digest(cert, tempDigest, tempFingerprint, &tempFingerprintLen ) <= 0)
 		return 0;
 	if(!memcmp(tempFingerprint, thumbprint, tempFingerprintLen))
@@ -729,4 +737,3 @@ wsman_transport_close_transport(WsManCli
 	cl->transport = NULL;
 }
 
-
--- openwsman-2.6.5.orig/src/server/shttpd/io_ssl.c
+++ openwsman-2.6.5/src/server/shttpd/io_ssl.c
@@ -11,23 +11,6 @@
 #include "defs.h"
 
 #if !defined(NO_SSL)
-struct ssl_func	ssl_sw[] = {
-	{"SSL_free",			{0}},
-	{"SSL_accept",			{0}},
-	{"SSL_connect",			{0}},
-	{"SSL_read",			{0}},
-	{"SSL_write",			{0}},
-	{"SSL_get_error",		{0}},
-	{"SSL_set_fd",			{0}},
-	{"SSL_new",			{0}},
-	{"SSL_CTX_new",			{0}},
-	{"SSLv23_server_method",	{0}},
-	{"SSL_library_init",		{0}},
-	{"SSL_CTX_use_PrivateKey_file",	{0}},
-	{"SSL_CTX_use_certificate_file",{0}},
-	{NULL,				{0}}
-};
-
 void
 _shttpd_ssl_handshake(struct stream *stream)
 {
--- openwsman-2.6.5.orig/src/server/shttpd/shttpd.c
+++ openwsman-2.6.5/src/server/shttpd/shttpd.c
@@ -1472,24 +1472,16 @@ set_ssl(struct shttpd_ctx *ctx, const ch
 	void		*lib;
 	struct ssl_func	*fp;
 	char *ssl_disabled_protocols = wsmand_options_get_ssl_disabled_protocols();
-	char *ssl_cipher_list = wsmand_options_get_ssl_cipher_list();
 	int		retval = FALSE;
-	EC_KEY*		key;
-
-	/* Load SSL library dynamically */
-	if ((lib = dlopen(SSL_LIB, RTLD_LAZY)) == NULL) {
-		_shttpd_elog(E_LOG, NULL, "set_ssl: cannot load %s", SSL_LIB);
-		return (FALSE);
-	}
-
-	for (fp = ssl_sw; fp->name != NULL; fp++)
-		if ((fp->ptr.v_void = dlsym(lib, fp->name)) == NULL) {
-			_shttpd_elog(E_LOG, NULL,"set_ssl: cannot find %s", fp->name);
-			return (FALSE);
-		}
 
 	/* Initialize SSL crap */
+	debug("Initialize SSL");
+	SSL_load_error_strings();
+	#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	SSL_library_init();
+	#else
+	OPENSSL_init_ssl(0, NULL);
+	#endif
 
 	if ((CTX = SSL_CTX_new(SSLv23_server_method())) == NULL)
 		_shttpd_elog(E_LOG, NULL, "SSL_CTX_new error");
@@ -1500,13 +1492,6 @@ set_ssl(struct shttpd_ctx *ctx, const ch
 	else
 		retval = TRUE;
 
-	/* This enables ECDH Perfect Forward secrecy. Currently with just the most generic p256 prime curve */
-	key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
-	if (key != NULL) {
-		SSL_CTX_set_tmp_ecdh(CTX, key);
-		EC_KEY_free(key);
-	}
-
 	while (ssl_disabled_protocols) {
 		struct ctx_opts_t {
 			char *name;
@@ -1532,7 +1517,11 @@ set_ssl(struct shttpd_ctx *ctx, const ch
 			if (strncasecmp(protocols[idx].name, ssl_disabled_protocols, blank_ptr-ssl_disabled_protocols) == 0) {
 				//_shttpd_elog(E_LOG, NULL, "SSL: disable %s protocol", protocols[idx].name);
 				debug("SSL: disable %s protocol", protocols[idx].name);
+				#if OPENSSL_VERSION_NUMBER < 0x10100000L
 				SSL_CTX_ctrl(CTX, SSL_CTRL_OPTIONS, protocols[idx].opt, NULL);
+				#else
+				SSL_CTX_set_options(CTX, protocols[idx].opt);
+				#endif
 				break;
 			}
 		}
@@ -1541,12 +1530,6 @@ set_ssl(struct shttpd_ctx *ctx, const ch
 		ssl_disabled_protocols = blank_ptr + 1;
 	}
 
-	if (ssl_cipher_list) {
-          int rc = SSL_CTX_set_cipher_list(CTX, ssl_cipher_list);
-          if (rc != 0) {
-            _shttpd_elog(E_LOG, NULL, "Failed to set SSL cipher list \"%s\"", ssl_cipher_list);
-          }
-        }
 	ctx->ssl_ctx = CTX;
 
 	return (retval);
--- openwsman-2.6.5.orig/src/server/shttpd/ssl.h
+++ openwsman-2.6.5/src/server/shttpd/ssl.h
@@ -12,50 +12,4 @@
 
 #include <openssl/ssl.h>
 
-#else
-
-/*
- * Snatched from OpenSSL includes. I put the prototypes here to be independent
- * from the OpenSSL source installation. Having this, shttpd + SSL can be
- * built on any system with binary SSL libraries installed.
- */
-
-typedef struct ssl_st SSL;
-typedef struct ssl_method_st SSL_METHOD;
-typedef struct ssl_ctx_st SSL_CTX;
-
-#define	SSL_ERROR_WANT_READ	2
-#define	SSL_ERROR_WANT_WRITE	3
-#define	SSL_ERROR_SYSCALL	5
-#define	SSL_FILETYPE_PEM	1
-
 #endif
-
-/*
- * Dynamically loaded SSL functionality
- */
-struct ssl_func {
-	const char	*name;		/* SSL function name	*/
-	union variant	ptr;		/* Function pointer	*/
-};
-
-extern struct ssl_func	ssl_sw[];
-
-#define	FUNC(x)	ssl_sw[x].ptr.v_func
-
-#define	SSL_free(x)	(* (void (*)(SSL *)) FUNC(0))(x)
-#define	SSL_accept(x)	(* (int (*)(SSL *)) FUNC(1))(x)
-#define	SSL_connect(x)	(* (int (*)(SSL *)) FUNC(2))(x)
-#define	SSL_read(x,y,z)	(* (int (*)(SSL *, void *, int)) FUNC(3))((x),(y),(z))
-#define	SSL_write(x,y,z) \
-	(* (int (*)(SSL *, const void *,int)) FUNC(4))((x), (y), (z))
-#define	SSL_get_error(x,y)(* (int (*)(SSL *, int)) FUNC(5))((x), (y))
-#define	SSL_set_fd(x,y)	(* (int (*)(SSL *, int)) FUNC(6))((x), (y))
-#define	SSL_new(x)	(* (SSL * (*)(SSL_CTX *)) FUNC(7))(x)
-#define	SSL_CTX_new(x)	(* (SSL_CTX * (*)(SSL_METHOD *)) FUNC(8))(x)
-#define	SSLv23_server_method()	(* (SSL_METHOD * (*)(void)) FUNC(9))()
-#define	SSL_library_init() (* (int (*)(void)) FUNC(10))()
-#define	SSL_CTX_use_PrivateKey_file(x,y,z)	(* (int (*)(SSL_CTX *, \
-		const char *, int)) FUNC(11))((x), (y), (z))
-#define	SSL_CTX_use_certificate_file(x,y,z)	(* (int (*)(SSL_CTX *, \
-		const char *, int)) FUNC(12))((x), (y), (z))
