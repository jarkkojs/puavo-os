#!/usr/bin/env python3

import dbus
import dbus.mainloop.glib
import gettext
import gi
import signal

gi.require_version('AyatanaAppIndicator3', '0.1')
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')

from gi.repository import AyatanaAppIndicator3
from gi.repository import Gtk 
from gi.repository import Notify

gettext.bindtextdomain('puavo-exammode-applet', '/usr/share/locale')
gettext.textdomain('puavo-exammode-applet')
_tr = gettext.gettext

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

class PuavoExamModeApplet:
  def __init__(self):
    Notify.init('puavo-exammode-applet')

    self.dbus_iface = self.get_dbus_iface()
    self.dbus_iface.connect_to_signal('ExamsAvailable', self.exams_available)

    icon_path = '/usr/share/icons/Adwaita/64x64/legacy/text-editor-symbolic.symbolic.png'

    self.indicator \
      = AyatanaAppIndicator3.Indicator.new('puavo-exammode-applet',
          icon_path, AyatanaAppIndicator3.IndicatorCategory.SYSTEM_SERVICES)

    self.available_exams = []
    self.update_menu()


  def get_dbus_iface(self):
    bus = dbus.SystemBus()
    dbusobj = bus.get_object('org.puavo.Exam', '/exammode')
    return dbus.Interface(dbusobj, dbus_interface='org.puavo.Exam.exammode')


  def update_menu(self):
    self.menu = Gtk.Menu()

    if len(self.available_exams) > 0:
      menuitem = Gtk.MenuItem(label=_tr('Available exams:'))
      menuitem.set_sensitive(False)
      menuitem.show()
      self.menu.append(menuitem)

      separator = Gtk.SeparatorMenuItem()
      separator.show()
      self.menu.append(separator)

      for exam in self.available_exams:
        # XXX add available exams to menu
        pass

      self.menu.show_all()
      status = AyatanaAppIndicator3.IndicatorStatus.ACTIVE
    else:
      status = AyatanaAppIndicator3.IndicatorStatus.PASSIVE

    self.indicator.set_menu(self.menu)
    self.indicator.set_status(status)


  def main(self):
    Gtk.main()


  def exams_available(self, examinfo):
    pass


applet = PuavoExamModeApplet()

if __name__ == '__main__':
  signal.signal(signal.SIGINT, signal.SIG_DFL)
  applet.main()
