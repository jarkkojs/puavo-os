#!/usr/bin/env python3

import dbus
import dbus.mainloop.glib
import getpass
import gettext
import gi
import json
import os
import signal
import sys
import syslog

gi.require_version('AyatanaAppIndicator3', '0.1')
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')

from gi.repository import AyatanaAppIndicator3
from gi.repository import GLib
from gi.repository import Gtk 
from gi.repository import Notify

gettext.bindtextdomain('puavo-exammode-applet', '/usr/share/locale')
gettext.textdomain('puavo-exammode-applet')
_tr = gettext.gettext

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

ICON_PATH = '/usr/share/icons/Adwaita/64x64/legacy/text-editor-symbolic.symbolic.png'

def logmsg(priority, message):
  print(message, file=sys.stderr)
  syslog.syslog(priority, message)


class PuavoExamModeApplet:

  def __init__(self):
    Notify.init('puavo-exammode-applet')

    self.dbus_iface = self.get_dbus_iface()
    self.dbus_iface.connect_to_signal('ExamsAvailable', self.exams_available)

    self.indicator \
      = AyatanaAppIndicator3.Indicator.new('puavo-exammode-applet',
          ICON_PATH, AyatanaAppIndicator3.IndicatorCategory.SYSTEM_SERVICES)
    self.indicator.set_status(AyatanaAppIndicator3.IndicatorStatus.ACTIVE)

    self.available_exams = []
    self.update_menu()

    self.register_to_exam_service()


  def get_dbus_iface(self):
    bus = dbus.SystemBus()
    dbusobj = bus.get_object('org.puavo.Exam', '/exammode')
    return dbus.Interface(dbusobj, dbus_interface='org.puavo.Exam.exammode')


  def register_to_exam_service(self):
    try:
      username = getpass.getuser()
      krb5ccname_env = os.environ['KRB5CCNAME']
      lang_locale = os.environ['LANG']
    except:
      # XXX log error
      sys.exit(1)

    self.dbus_iface.Register(username, lang_locale, krb5ccname_env,
                             reply_handler=lambda: None,
                             error_handler=self.register_dbus_error_handler)


  def register_dbus_error_handler(self, dbusexception):
    raise Exception('unexpected dbus error in register, that is bad: %s' \
                       % dbusexception)


  def update_menu(self):
    self.menu = Gtk.Menu()

    if len(self.available_exams) > 0:
      header = Gtk.MenuItem(label=_tr('Available exams:'))
      header.set_sensitive(False)
      header.show()
      self.menu.append(header)

      separator = Gtk.SeparatorMenuItem()
      separator.show()
      self.menu.append(separator)

      self.menuitems = []
      for exam in self.available_exams:
        exam_id = exam['id']
        exam_name = exam['name']
        exam_choice = Gtk.MenuItem(label=exam_name)
        exam_choice.set_sensitive(True)
        exam_choice.connect('activate', lambda w: self.choose_exam(exam_id, w))
        exam_choice.show()
        self.menu.append(exam_choice)

      self.indicator.set_status(AyatanaAppIndicator3.IndicatorStatus.ACTIVE)
      self.indicator.set_menu(self.menu)

      self.menu.show_all()
    else:
      self.indicator.set_status(AyatanaAppIndicator3.IndicatorStatus.PASSIVE)


  def choose_exam(self, exam_id, widget):
    # XXX should pass exam id somehow (which one is chosen)
    self.dbus_iface.StartSession(exam_id,
      reply_handler=lambda: None,
      error_handler=self.start_session_dbus_error_handler)


  def start_session_dbus_error_handler(self, dbusexception):
    raise Exception('unexpected dbus error in start session, that is bad: %s' \
                       % dbusexception)


  def main(self):
    Gtk.main()


  def exams_available(self, examinfo_json):
    try:
      examinfo = json.loads(examinfo_json)
      if not 'version' in examinfo:
        raise Exception('examinfo is missing version')
      if type(examinfo['version']) != str:
        raise Exception('examinfo version is not a string')
      version = examinfo['version'].split('.')
      if len(version) != 2:
        raise Exception('examinfo version is not x.y')
      if int(version[0]) > 1:
       raise Exception('unsupported exams info version (%d | supported %d)' \
                          % (version[0], 1))

      if type(examinfo['exams']) != list:
        raise Exception('no exams list')

      for e in examinfo['exams']:
        if not 'id' in e:
          raise Exception('exam is missing an id')
        if type(e['id']) != int:
          raise Exception('exam id is not an integer')
        if not 'name' in e:
          raise Exception('exam is missing a name')
        if type(e['name']) != str:
          raise Exception('exam name is not a string')
        if not 'params' in e:
          raise Exception('exam is missing exam parameters')
        if type(e['params']) != dict:
          raise Exception('exam parameters is not a dict')

      self.available_exams = examinfo['exams']
      self.update_menu()

    except Exception as e:
      print(e)
      # XXX should log an error to syslog
      pass


exitstatus = 0

syslog.openlog('puavo-exammode-applet')

applet = PuavoExamModeApplet()

try:
  signal.signal(signal.SIGINT, signal.SIG_DFL)
  applet.main()
except Exception as e:
  logmsg(syslog.LOG_ERR, 'unexpected error: %s' % e)
  exitstatus = 1

syslog.closelog()

sys.exit(exitstatus)
