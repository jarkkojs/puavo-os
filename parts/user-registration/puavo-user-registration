#!/usr/bin/python3

# New user registration program

import argparse
import gettext
import gi
import os
import socket
import subprocess
import sys

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GdkPixbuf, Gio

gettext.bindtextdomain('puavo-user-registration', '/usr/share/locale')
gettext.textdomain('puavo-user-registration')
_tr = gettext.gettext

sys.path.append('/usr/share/puavo-user-registration')

from logger import log

import utils
import privacy_policy
from page_welcome import PageWelcome
from page_network import PageNetwork
from page_account import PageAccount
from page_login import PageLogin
from page_complete import PageComplete

# ==============================================================================
# ==============================================================================


def disable_registration_window(is_production):
    cmd = ['sudo', '-n',
           '/usr/sbin/puavo-conf-local',
           'puavo.xsessions.user_registration.enabled',
           'false']

    log.info('disable_registration_window(): running "%s"', cmd)

    if is_production:
        subprocess.check_call(cmd)


def login_locally(username, password, is_production):
    if not is_production:
        log.info('login_locally(): setting up local login, ' \
                   'username="%s", password="%s"', username, password)
        return True

    log.info('login_locally(): setting up local login, username="%s"',
        username)

    if not (username and password):
        raise Exception(_tr('internal error: username and password missing'))

    cmd = ['sudo', '-n', '/usr/lib/puavo-ltsp-client/firstlogin-to-account',
           username]

    proc = subprocess.Popen(cmd,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL)

    proc.stdin.write(password.encode())
    proc.stdin.close()
    proc.wait()

    return proc.returncode == 0


# ==============================================================================
# ==============================================================================


class NewUserRegistrationWindow:
    def __init__(self, application, settings):
        self.application = application

        self.data_dir = settings['data_dir']
        self.prod_mode = settings['prod_mode']
        self.machine_password = settings['machine_password']
        self.organisation_domain = settings['organisation_domain']

        self.page_definitions = [
            (PageWelcome),
            (PageNetwork),
            (PageAccount),
            (PageComplete),
        ]

        self.all_pages = []
        self.current_page = None
        self.current_page_num = None

        # Unfortunately, we're still plagued by the same problem
        # the previous version had: we have to adjust font sizes
        # and other scales for various screen sizes.

        # The entry font sizes WILL vary slightly if you keep
        # clicking prev/next. I don't know why :-(

        try:
            screen_width = Gdk.Screen.get_default().width()
        except Exception as e:
            log.warning('unable to determine the screen width: %s', str(e))
            screen_width = 1366

        if not self.prod_mode:
            screen_width = 1366
            screen_height = 768

        if screen_width >= 1920:
            css_variables = {
                'background_image': 'background_1920.png',
                'entry_font_size': '28px',
                'gtk_dialog_font_scale': '150%',
                'main_font_scale': '200%',
            }
        elif screen_width >= 1600:
            css_variables = {
                'background_image': 'background_1366.png',
                'entry_font_size': '24px',
                'gtk_dialog_font_scale': '120%',
                'main_font_scale': '150%',
            }
        elif screen_width >= 1024:
            css_variables = {
                'background_image': 'background_640.png',
                'entry_font_size': '16px',
                'gtk_dialog_font_scale': '80%',
                'main_font_scale': '100%',
            }
        else:
            # XXX sizes as small as these do not work,
            # XXX but I am hoping to make them work
            css_variables = {
                'background_image': 'background_640.png',
                'entry_font_size': '12px',
                'gtk_dialog_font_scale': '50%',
                'main_font_scale': '60%',
            }

        css_variables['background_image'] = \
            os.path.join(self.data_dir, css_variables['background_image'])

        try:
            # Load the main UI file
            self.main_builder = Gtk.Builder()
            self.main_builder.set_translation_domain('puavo-user-registration')
            self.main_builder.add_from_file(os.path.join(self.data_dir,
                                                         'main_window.glade'))

            # Load custom CSS
            css = open(os.path.join(self.data_dir, 'main_window.css')).read()

            for key, value in css_variables.items():
                css = css.replace('$(' + key + ')', str(value))

            style_provider = Gtk.CssProvider()
            style_provider.load_from_data(bytes(css, 'utf-8'))

            Gtk.StyleContext.add_provider_for_screen(
                Gdk.Screen.get_default(),
                style_provider,
                Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

            # Setup event handling
            self.main_builder.connect_signals(self)

        except Exception as e:
            log.fatal('%s', str(e), exc_info=True)
            return

        self.main_window = self.main_builder.get_object('main_window')
        self.main_window.set_application(self.application)
        self.main_window.set_icon_name('user-info')

        if self.prod_mode:
            self.main_window.fullscreen()
            self.main_window.set_skip_taskbar_hint(True)
            self.main_window.set_skip_pager_hint(True)
            self.main_window.set_deletable(False)
            self.main_window.set_decorated(False)
        else:
            self.main_window.set_size_request(screen_width, screen_height)

        # If we have a privacy policy, show the button
        self.__privacy_policy_file = \
            os.path.realpath(os.path.join(self.data_dir, 'privacy_policy.html'))

        if os.path.exists(self.__privacy_policy_file):
            log.info('privacy policy file "%s" exists', self.__privacy_policy_file)
            self.main_builder.get_object('privacy_policy').show()

        # Try to set the lower corner logo
        self.__logo_file = os.path.realpath(os.path.join(self.data_dir, 'lower_logo.png'))

        if os.path.exists(self.__logo_file):
            log.info('lower corner logo file "%s" exists', self.__logo_file)

            logo = self.main_builder.get_object('logo')

            try:
                pixbuf = \
                    GdkPixbuf.Pixbuf.new_from_file_at_scale(
                        filename=self.__logo_file,
                        width=-1,
                        height=32,
                        preserve_aspect_ratio=True)

                logo.set_from_pixbuf(pixbuf)
                logo.show()
            except Exception as e:
                logo.hide()
                log.error('could not set the lower corner logo image: %s',
                          str(e), exc_info=True)

        self.main_title = self.main_builder.get_object('main_title')

        self.desktop_button = self.main_builder.get_object('go_to_desktop')
        self.login_button \
            = self.main_builder.get_object('login_with_existing_account')

        middle_box = self.main_builder.get_object('middle_box')
        middle_box.show_all()

        # Build the child pages
        try:
            for ctor in self.page_definitions:
                page = ctor(self, self.main_window, middle_box, self.data_dir,
                    self.main_builder)
                self.all_pages.append(page)
                if ctor == PageAccount:
                    self.account_page = page
        except Exception as e:
            log.error('%s', str(e), exc_info=True)
            self.main_window.destroy()
        else:
            # Activate the initial page
            self.goto_page_by_num(0)

        self.login_page = PageLogin(self, self.main_window, middle_box,
            self.data_dir, self.main_builder)

        self.main_window.show()


    def close(self, *args):
        self.main_window.destroy()


    def go_to_desktop_clicked(self, *args):
        dialog = Gtk.MessageDialog(parent=self.main_window,
            message_type=Gtk.MessageType.WARNING,
            buttons=Gtk.ButtonsType.OK_CANCEL, text=_tr('Go to desktop?'))

        dialog.format_secondary_text( \
            _tr('Are you sure you do not want to create a user account?  ' \
                'Without a user account, your files will be lost after your ' \
                'desktop session ends.'))

        response = dialog.run()
        dialog.destroy()

        if response == Gtk.ResponseType.OK:
            self.main_window.destroy()


    def login_with_existing_account_clicked(self, *args):
        self.login_page.swap_with(self.account_page)


    # Show the privacy policy dialog
    def privacy_policy_clicked(self, *args):
        dlg = privacy_policy.PrivacyPolicy(self.main_window, self.__privacy_policy_file)
        dlg.run()
        dlg.destroy()


    # Called from account creation page when the process is complete.
    # Saves the username and password, so they can be used.
    def save_user_details(self, username, password):
        # These variables are undefined unless this method is called,
        # so if someone calls finish_registration() without calling
        # this method first, the process ends in a fatal error.
        self.username = username
        self.password = password


    # Called from the "complete" page to finish up the operation
    def finish_registration(self):
        try:
            log.info('finishing up the registration process')

            disable_registration_window(self.prod_mode)

            error_msg = ''
            try:
                login_ok = login_locally(self.username, self.password,
                                         self.prod_mode)
                if not login_ok:
                    raise Exception('login failed after registration')
            except Exception as e:
                log.fatal('%s', str(e), exc_info=True)
                error_msg \
                  = _tr('Could not do initial login with new user' \
                        ' credentials.  Please remember your username' \
                        ' "%s" for the first login.  Contact support if' \
                        ' there are problems.') % self.username
            if error_msg:
                utils.show_error_message(self.main_window, _tr('Error'),
                    error_msg)

        except Exception as e:
            log.error('%s', str(e), exc_info=True)

            utils.show_error_message( \
                self.main_window,
                _tr('Fatal Error'),
                _tr('Could not finish the registration process.  Please contact support.'))


    def reboot(self):
        try:
            log.info('rebooting now')
            if self.prod_mode:
                subprocess.run(['systemctl', 'reboot', '-i'])
            self.main_window.destroy()
        except Exception as e:
            log.error('%s', str(e), exc_info=True)
            utils.show_error_message( \
                self.main_window,
                _tr('Reboot'),
                _tr('Could not reboot.'))


    def login_locally_from_loginpage(self, username, password):
        if password == '':
            return
        self.username = username
        self.password = password

        try:
            login_ok = login_locally(username, password, self.prod_mode)
            if not login_ok:
                utils.show_error_message(self.main_window, _tr('Error'),
                                        _tr('Bad username and/or password'))
            else:
                self.next_page()
        except Exception as e:
            log.warning('unexpected error in local login: %s', str(e))
            utils.show_error_message(self.main_window, _tr('Error'),
                _tr('An unexpected error occurred'))


    # Returns the machine data needed on the accounts page, when sending
    # data to the server
    def get_machine_data(self):
        data = {
            'organisation_domain': self.organisation_domain,
            'password': self.machine_password
        }

        if self.prod_mode:
            data['dn'] = open('/etc/puavo/ldap/dn', 'rb').read().decode('utf-8').strip()
            data['hostname'] = socket.gethostname()
        else:
            # This machine does not exist anywhere, development purposes only
            data['dn'] = 'puavoId=37,ou=Devices,ou=Hosts,dc=edu,dc=hogwarts,dc=net'
            data['hostname'] = 'laptop1'

        return data


    def previous_page(self):
        next_page_num = self.current_page_num - 1

        if next_page_num < 0:
            next_page_num = len(self.page_definitions) - 1

        self.goto_page_by_num(next_page_num)


    def next_page(self):
        next_page_num = (self.current_page_num + 1) % len(self.page_definitions)
        self.goto_page_by_num(next_page_num)


    def goto_page(self, page):
        if page == self.current_page:
            return

        # Hide the previous page first
        if self.current_page is not None:
            self.current_page.deactivate()

        self.current_page = page

        # Update the main title
        title = self.current_page.get_main_title()

        if title is None:
            self.main_title.hide()
        else:
            self.main_title.set_label(str(title))
            self.main_title.show()

        # Some pages disable the "Go to desktop" button
        self.desktop_button.set_sensitive(self.current_page.enable_desktop_button())
        self.login_button.set_sensitive(self.current_page.enable_login_button())

        # Switch the page
        self.current_page.activate()


    def goto_page_by_num(self, page_num):
        self.current_page_num = page_num
        self.goto_page(self.all_pages[page_num])


class UserRegistrationApplication(Gtk.Application):
    def __init__(self, application_id, flags, settings):
        Gtk.Application.__init__(self, application_id=application_id, flags=flags)
        self.connect('activate', self.new_window, settings)


    def new_window(self, *args):
        NewUserRegistrationWindow(self, args[1])


# ==============================================================================
# ==============================================================================


# Handle command-line arguments
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument('--prod',
                    action='store_true',
                    required=False,
                    help='enable production mode')

parser.add_argument('--at-session-startup',     # backwards compat only
                    action='store_true',
                    required=False,
                    help='')

args = parser.parse_args()

prod_mode = args.prod or args.at_session_startup

settings = {
    'prod_mode': prod_mode,
}

try:
    if prod_mode:
        get_password_cmd = ['sudo', '-n', 'cat', '/etc/puavo/ldap/password']
        settings['machine_password'] = subprocess.check_output(get_password_cmd).decode('utf-8').strip()
        settings['organisation_domain'] = open('/etc/puavo/domain', 'rb').read().decode('utf-8').strip()
    else:
        # This password is a randomly generated string, the "machine"
        # does not actually exist
        settings['machine_password'] = '7nj7am5d09kug3ed4g24z3zx3x6pek09ybrdbfrd'
        settings['organisation_domain'] = 'hogwarts.puavo.net'
except subprocess.CalledProcessError:
    errmsg = _tr('You do not have the required permissions to use this tool.')
    utils.show_error_message(None, _tr('No permissions'), errmsg)
    exit(1)

if prod_mode:
    settings['data_dir'] = '/usr/share/puavo-user-registration/data'
else:
    settings['data_dir'] = './data'

try:
    app = UserRegistrationApplication('opinsys.new_user_registration',
                                      Gio.ApplicationFlags.FLAGS_NONE,
                                      settings)

    app.run()
except Exception as e:
    log.fatal('TOP-LEVEL EXCEPTION CAUGHT')
    log.fatal('%s', str(e), exc_info=True)
    exit(1)
