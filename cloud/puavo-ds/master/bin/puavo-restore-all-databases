#!/usr/bin/ruby
#
# Destroy current slapd installation and restore all databases
# and slapd configurations (cn=config) from the dump files.
#
# Usage: puavo-restore-all-databases [options] --dump-directory DIR
#

require 'fileutils'
require 'optparse'
require 'puavo/execute'
require 'tempfile'

# XXX what to do with these?  these should be somewhere else I think
# def hdb_configurations
#   generic_olc_db_config = ['set_cachesize 0 10485760 0',
#                            'set_lg_bsize 2097512',
#                            'set_flags DB_LOG_AUTOREMOVE']
#   generic_olc_db_index = ['uidNumber pres,eq',
#                           'sambaSID pres,eq',
#                           'sambaSIDList pres,eq',
#                           'sambaGroupType pres,eq',
#                           'member,memberUid pres,eq',
#                           'puavoSchool pres,eq',
#                           'puavoId pres,eq',
#                           'puavoTag pres,eq',
#                           'puavoDeviceType pres,eq',
#                           'puavoHostname pres,eq,sub',
#                           'displayName,puavoEduPersonReverseDisplayName pres,eq,sub',
#                           'uid pres,eq',
#                           'krbPrincipalName pres,eq',
#                           'cn,sn,mail,givenName pres,eq,approx,sub',
#                           'objectClass eq',
#                           'entryUUID eq',
#                           'entryCSN eq',
#                           'macAddress eq'
#                          ]
#   generic_olc_db_cache_size = '30000'
#   generic_olc_db_dn_cache_size = '60000'
#   generic_olc_db_checkpoint = '64 5'
#
#   if line.match(/dn: olcDatabase=.*hdb/)
#     cf.puts line
#
#     generic_olc_db_config.each do |config|
#       cf.puts "olcDbConfig: #{ config }"
#     end
#     generic_olc_db_index.each do |index|
#       cf.puts "olcDbIndex: #{ index }"
#     end
#
#     cf.puts "olcDbCacheSize: #{ generic_olc_db_cache_size }"
#     cf.puts "olcDbDNCacheSize: #{ generic_olc_db_dn_cache_size }"
#     cf.puts "olcDbCheckpoint: #{ generic_olc_db_checkpoint }"
#
#   elsif line.match(/olcDbConfig:/)
#     next # skip old value
#   elsif line.match(/olcDbIndex:/)
#     next # skip old value
#   elsif line.match(/olcDbCacheSize:/i)
#     next # skip old value
#   elsif line.match(/olcDbDNcacheSize:/i)
#     next # skip old value
#   elsif line.match(/olcDbCheckpoint:/i)
#     next # skip old value
#   elsif line.match(/olcDbDirectory:/)
#    cf.puts line
#     db_directory = line.match(/olcDbDirectory: (.*)/)[1]
#     # Create data directory for database
#     FileUtils.mkdir_p(db_directory)
#   else
#     cf.puts line
#   end
# end

def handle_db_config_conversions(source, target)
  lines = source.readlines
  database_dirs = lookup_db_dirs(lines)

  lines.each do |line|
    target.puts line
  end

  database_dirs
end

def lookup_db_dirs(db_conf_lines)
  database_dirs = []
  db_conf_lines.each do |line|
    matchdata = line.match(/olcDbDirectory: (.*)/)
    if matchdata then
      database_dirs << matchdata[1]
    end
  end
  database_dirs
end

def restore_databases(dumpdir, cn_config_path)
  puts "Restore configurations (cn=config)"
  response = Puavo::Execute.run([
               '/usr/sbin/slapadd', '-l', cn_config_path,
                 '-F', '/etc/ldap/slapd.d', '-b', 'cn=config' ])
  warn response.stderr if $options[:verbose]

  Dir.foreach(dumpdir) do |db_dump_file|
    next if db_dump_file == 'cn=config.ldif'

    match_data = db_dump_file.match(/(.*)\.ldif$/)
    if match_data then
      ldap_base = match_data[1]
      puts "Restore database: #{ ldap_base }"

      # Restore database
      db_ldif_path = File.join(dumpdir, db_dump_file)
      response = Puavo::Execute.run([
                   '/usr/sbin/slapadd', '-q', '-b', ldap_base,
                   '-l', db_ldif_path, '-F', '/etc/ldap/slapd.d' ])
      warn response.stderr if $options[:verbose]
    end
  end

  FileUtils.chown_R('openldap', 'openldap', '/etc/ldap/slapd.d/')
  FileUtils.chown_R('openldap', 'openldap', '/var/lib/ldap')
end

def shutdown_and_remove_databases
  # Stop slapd service
  begin
    response = Puavo::Execute.run([ '/usr/sbin/service', 'slapd', 'stop' ])
    warn response.stderr if $options[:verbose]
  rescue Puavo::ExitStatusError => exception
    warn "\nCould not stop slapd service: " + exception.response.stderr.to_s
  end

  # Remove slapd configuration directory
  FileUtils.rm_r(Dir.glob('/etc/ldap/slapd.d/cn=config*'))

  # Remove all databases
  FileUtils.rm_r(Dir.glob('/var/lib/ldap/*'))
end

$options = { :verbose => false }

OptionParser.new do |opts|
  opts.banner = 'Usage: puavo-restore-all-databases [options]'

  opts.on('-d', '--dump-directory [DUMPDIR]',
          'source directory of dump files') do |dir|
    $options[:dumpdir] = dir
  end

 opts.on('-v', '--[no-]verbose',
          'Run verbosely. Print STDERR of shell command (eg. slapadd)') do |v|
    $options[:verbose] = v
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit 0
  end
end.parse!

if $options[:dumpdir].nil? then
  warn 'Missing argument --dump-directory'
  exit 1
end

unless File.directory?($options[:dumpdir]) then
  warn "Cannot find dump directory: #{ $options[:dumpdir] }"
  exit 1
end

puts 'This will destroy previous databases permanently and restore databases' \
        + ' from the dump files!'
puts 'ARE YOU SURE YOU WANT TO DO THIS?'

loop do
  print 'Type YES to continue (or press CTRL-C to abort)> '
  break if gets.strip == 'YES'
end

Tempfile.open('cn_config.ldif') do |cnconf_target|
  # Check cn=config.ldif first before destroying anything,
  # in case we have some issues.
  cn_config_source_path = File.join($options[:dumpdir], 'cn=config.ldif')
  database_dirs = nil
  File.open(cn_config_source_path) do |cnconf_source|
    database_dirs = handle_db_config_conversions(cnconf_source, cnconf_target)
  end
  cnconf_target.close
  modified_cn_config_path = cnconf_target.path

  # we should now be ready for the operation

  shutdown_and_remove_databases

  database_dirs.each do |db_dir|
    FileUtils.mkdir_p(db_dir)
  end

  restore_databases($options[:dumpdir], modified_cn_config_path)
end

puts "\nDatabases were successfully restored!\n\n"
