#!/usr/bin/ruby

require 'erb'
require 'fileutils'
require 'getoptlong'
require 'tempfile'

update_only_config = false
use_force = false

opts = GetoptLong.new(
  [ '--help', '-h',         GetoptLong::NO_ARGUMENT ],
  [ '--force',              GetoptLong::NO_ARGUMENT ],
  [ '--update-only-config', GetoptLong::NO_ARGUMENT ],
)

opts.each do |opt, arg|
  case opt
  when '--help'
    puts <<EOF
Usage: puavo-init-ldap-slave [OPTION]...

Configure and initialize slapd.

-h, --help                       display this help and exit
    --force                      clear and re-initialize the database
    --update-only-config         update only cn=config and restart slapd

EOF
    exit(0)
  when '--force'
    use_force = true
  when '--update-only-config'
    update_only_config = true
  end
end

if ARGV.length != 0 then
  warn 'error: extra arguments'
  exit(1)
end

ENV['LDAPTLS_REQCERT'] = 'demand'
ENV['LDAPTLS_CACERT']  = '/etc/puavo-conf/rootca.pem'

Sentinel_file = '/state/var/lib/ldap/init_ldap_slave_done'

if !File.exist?(Sentinel_file) && update_only_config then
  warn 'error: cannot update uninitialized slapd'
  exit(1)
end

if File.exist?(Sentinel_file) && !use_force then
  warn 'error: slapd is already initialized, use the --force, Luke!'
  exit(1)
end

@binddn        = File.read('/etc/puavo/ldap/dn'      ).chomp
@bindpw        = File.read('/etc/puavo/ldap/password').chomp
@master_server = File.read('/etc/puavo/ldap/master'  ).chomp
@suffix        = File.read('/etc/puavo/ldap/base'    ).chomp

def parse_erb(basename)
  ldif_template = File.read("/usr/share/puavo-ds-slave/#{ basename }.ldif.erb")
  ldif = ERB.new(ldif_template, 0, "%<>")

  tempfile = Tempfile.open(basename)
  tempfile.puts ldif.result
  tempfile.close

  tempfile
end

@acls = `ldapsearch -LLL -x -H ldap://#{ @master_server } -D #{ @binddn } -w #{ @bindpw } -Z -b cn=config "(&(objectClass=olcDatabaseConfig)(olcSuffix=#{ @suffix }))" olcAccess | grep -v dn:`
if $?.exitstatus != 0 then
  warn 'error: failed to get ACLs from the master server'
  exit(1)
end

@schemas = `ldapsearch -LLL -x -H ldap://#{ @master_server } -D #{ @binddn } -w #{ @bindpw } -Z -b cn=schema,cn=config`
if $?.exitstatus != 0 then
  warn 'error: failed to get schemas from the master server'
  exit(1)
end

tempfile = parse_erb('init_ldap_slave')

system('service slapd stop')
sleep 3
system('pkill -9 -x slapd')

FileUtils.mkdir_p '/state/etc/ldap/slapd.d'
FileUtils.chmod(0750, '/state/etc/ldap/slapd.d')
FileUtils.chown('openldap', 'openldap', '/state/etc/ldap/slapd.d')

if !system('rm -rf /state/etc/ldap/slapd.d/*') then
  warn 'error: failed to remove old LDAP configuration'
  exit(1)
end

if !system("slapadd -l #{tempfile.path} -F /state/etc/ldap/slapd.d -b cn=config") then
  warn 'error: failed to update the configuration of the database'
  exit(1)
end

if !system('chown -R openldap.openldap /state/etc/ldap/slapd.d') then
  warn 'error: failed to chown /state/etc/ldap/slapd.d to openldap'
  exit(1)
end

if update_only_config then
  if !system('service slapd start') then
    warn 'error: failed to start slapd'
    exit(1)
  end
  exit(0)
end

if !system('rm -rf /state/var/lib/ldap/*') then
  warn 'error: failed to remove the old LDAP database'
  exit(1)
end

if !system('chown -R openldap.openldap /state/var/lib/ldap') then
  warn 'error: failed to chown /state/var/lib/ldap to openldap'
  exit(1)
end

if !system('chmod -R 0750 /state/var/lib/ldap') then
  warn 'error: failed to chmod /var/lib/ldap'
  exit(1)
end

if !system('service slapd start') then
  warn 'error: failed to start slapd'
  exit(1)
end

FileUtils.touch(Sentinel_file)

puts('Waiting for slapd to synchronize all data from the LDAP master.')
puts('This may take a while.')

previous_linecount = -1
current_linecount = 0
while previous_linecount != current_linecount do
  if current_linecount > 0 then
    puts("Still waiting... the magic number is #{ current_linecount } now.")
  end

  sleep 10
  previous_linecount = current_linecount
  IO::popen('slapcat') do |io|
    current_linecount = io.readlines().count
    io.close()
    if !$?.success? then
      warn 'error: failed to query the database contents'
      exit(1)
    end
  end
end

puts('Synchronization complete.')
puts()
