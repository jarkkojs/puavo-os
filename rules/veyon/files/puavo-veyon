#!/usr/bin/ruby

require 'dbus'
require 'fileutils'
require 'open3'
require 'puavo/conf'
require 'tempfile'

class VeyonSlave < DBus::Object
  dbus_interface 'org.puavo.Veyon.slave' do
    dbus_method :AddPublicKey, 'in public_key:s' do |public_key|
      # XXX handle errors?
      # XXX handle command status?
      # XXX handle output?

      # delete old key first
      # XXX handle command status or not?
      cmd = [ 'veyon-cli', 'authkeys', 'delete', 'puavo_veyon_key/public' ]
      output, status = Open3.capture2e(*cmd)

      Tempfile.create('puavo_veyon_key') do |tmpfile|
        tmpfile.write(public_key)
        tmpfile.close
        cmd = [ 'veyon-cli', 'authkeys', 'import', 'puavo_veyon_key/public',
                tmpfile.path ]
        output, status = Open3.capture2e(*cmd)
        puts "status is #{ status } output is #{ output }"
        if status.success? then
          # XXX handle command status?
          system('service', 'veyon', 'restart')
        end
      end
    end
  end
end

class VeyonMaster < DBus::Object
  dbus_interface 'org.puavo.Veyon.master' do
    dbus_method :GetPublicKey, 'out ret:s' do
      public_key_path = '/etc/veyon/keys/public/puavo_veyon_key/key'
      # XXX providing some decent error message in case of errors or at least
      # XXX logging it would be very nice
      begin
        return IO.read(public_key_path)
      rescue StandardError => e
        # XXX stdout/stderr to /dev/null?  or where?  check status
        system('veyon-cli', 'authkeys', 'create', 'puavo_veyon_key')
        # XXX error handling?
        private_key_path = '/etc/veyon/keys/private/puavo_veyon_key/key'
        FileUtils.chown('root', 'puavodesktop', private_key_path)
        FileUtils.chmod(0640, private_key_path)
        # XXX should the veyon-service be restarted?
      end

      public_key = IO.read(public_key_path) rescue ''
      return public_key
    end
  end
end

puavoconf = Puavo::Conf.new
veyon_role = puavoconf.get('puavo.veyon.role')
puavoconf.close

bus = DBus::SystemBus.instance
service = bus.request_service('org.puavo.Veyon')

case veyon_role
  when 'master'
    service.export( VeyonMaster.new('/master') )
  when 'slave'
    service.export( VeyonSlave.new('/slave') )
  else
    exit(0)
end

# ...and start it
mainloop = DBus::Main.new
mainloop << bus
mainloop.run
