#!/bin/sh

set -eu

target_dir='/etc/shorewall.rofs'

fw_logging_policy=$(puavo-conf puavo.admin.logging.firewall)

# XXX duplicate code with "setup_freeradius"
iface_to_network_cidr() {
  iface=$1

  network_cidr=$(
    awk -v iface="$iface" '
      $1 == "iface" { current_iface = $2; address = ""; netmask = "" }
      current_iface == iface && $1 == "address" { address = $2 }
      current_iface == iface && $1 == "netmask" { netmask = $2 }
      address && netmask { print address, netmask; exit(0) }
    ' /etc/network/interfaces /etc/network/interfaces.d/* \
      | awk 'BEGIN {
               netMaskToCIDR["0.0.0.0"]         = 0
               netMaskToCIDR["128.0.0.0"]       = 1
               netMaskToCIDR["192.0.0.0"]       = 2
               netMaskToCIDR["224.0.0.0"]       = 3
               netMaskToCIDR["240.0.0.0"]       = 4
               netMaskToCIDR["248.0.0.0"]       = 5
               netMaskToCIDR["252.0.0.0"]       = 6
               netMaskToCIDR["254.0.0.0"]       = 7
               netMaskToCIDR["255.0.0.0"]       = 8
               netMaskToCIDR["255.128.0.0"]     = 9
               netMaskToCIDR["255.192.0.0"]     = 10
               netMaskToCIDR["255.224.0.0"]     = 11
               netMaskToCIDR["255.240.0.0"]     = 12
               netMaskToCIDR["255.248.0.0"]     = 13
               netMaskToCIDR["255.252.0.0"]     = 14
               netMaskToCIDR["255.254.0.0"]     = 15
               netMaskToCIDR["255.255.0.0"]     = 16
               netMaskToCIDR["255.255.128.0"]   = 17
               netMaskToCIDR["255.255.192.0"]   = 18
               netMaskToCIDR["255.255.224.0"]   = 19
               netMaskToCIDR["255.255.240.0"]   = 20
               netMaskToCIDR["255.255.248.0"]   = 21
               netMaskToCIDR["255.255.252.0"]   = 22
               netMaskToCIDR["255.255.254.0"]   = 23
               netMaskToCIDR["255.255.255.0"]   = 24
               netMaskToCIDR["255.255.255.128"] = 25
               netMaskToCIDR["255.255.255.192"] = 26
               netMaskToCIDR["255.255.255.224"] = 27
               netMaskToCIDR["255.255.255.240"] = 28
               netMaskToCIDR["255.255.255.248"] = 29
               netMaskToCIDR["255.255.255.252"] = 30
               netMaskToCIDR["255.255.255.254"] = 31
               netMaskToCIDR["255.255.255.255"] = 32
             }

             {
               ip_address = $1
               netmask    = $2
               split(ip_address, a, /\./)
               split(netmask,    b, /\./)
               network = and(a[1], b[1]) "." and(a[2], b[2]) "."  and(a[3], b[3]) "." and(a[4], b[4])

               print network "/" netMaskToCIDR[netmask]
               exit(0)
             }')
  if [ -z "$network_cidr" ]; then
    echo "Could not determine network/cidr for interface $iface" >&2
    return 1
  fi

  printf %s "$network_cidr"
}

iface_no_num() { echo "$1" | sed -E 's/[0-9]+$//'; }

get_dhcp_interfaces() {
  all_interfaces=$(awk '$1 == "iface" { print $2 }' /etc/network/interfaces \
                                                    /etc/network/interfaces.d/*)

  puavo_dhcpd_interfaces=$(puavo-conf puavo.networking.ddns.dhcpd_interfaces)
  for if_filter in $(echo "$puavo_dhcpd_interfaces" | tr , ' '); do
    for interf in $all_interfaces; do
      case "$interf" in
        $if_filter)
          echo "$interf"
          ;;
      esac
    done
  done
}

dhcpd_interfaces=$(get_dhcp_interfaces)

# -- interfaces
cat <<EOF > "${target_dir}/interfaces.tmp"
#ZONE	INTERFACE	BROADCAST	OPTIONS
dock	docker0		detect		physical=docker+,routeback=1
dock	br		detect		physical=br-+,routeback=1
inet	inet0		detect		dhcp,tcpflags,nosmurfs,bridge
$(for iface in $dhcpd_interfaces; do
    echo "$(iface_no_num "$iface")	${iface}	        detect		dhcp,tcpflags,nosmurfs,bridge"
  done)
ovpn	vpn0
EOF
mv "${target_dir}/interfaces.tmp" "${target_dir}/interfaces"

# -- masq
rm -f "${target_dir}/masq"

# -- params
case "$fw_logging_policy" in
  outgoing,rejected)
    cat <<EOF > "${target_dir}/params.tmp"
PUAVO_DEFAULT_LOG_LEVEL=NFLOG
PUAVO_REJECT_LOG_LEVEL=NFLOG
EOF
    ;;
  '')
    cat <<EOF > "${target_dir}/params.tmp"
PUAVO_DEFAULT_LOG_LEVEL=info
PUAVO_REJECT_LOG_LEVEL=
EOF
    ;;
  *)
    echo "Unknown logging policy '${fw_logging_policy}'" >&2
    exit 1
    ;;
esac
mv "${target_dir}/params.tmp" "${target_dir}/params"

# -- policy
cat <<'EOF' > "${target_dir}/policy.tmp"
#SOURCE         DEST            POLICY          LOG LEVEL       LIMIT:BURST
inet            fw              REJECT          $PUAVO_REJECT_LOG_LEVEL
fw              all		ACCEPT
ltsp            inet            ACCEPT
ltsp            ovpn            ACCEPT
ltsp            fw              ACCEPT
ovpn            fw              ACCEPT
wlan            inet            ACCEPT
wlan            fw              ACCEPT
wlan            ovpn		REJECT          $PUAVO_REJECT_LOG_LEVEL
all             all             REJECT          $PUAVO_REJECT_LOG_LEVEL
EOF
mv "${target_dir}/policy.tmp" "${target_dir}/policy"

# -- rules
{
  cat <<EOF
#ACTION         SOURCE          	DEST            	PROTO   DEST    SOURCE          ORIGINAL        RATE            USER/   MARK    CONNLIMIT       TIME         HEADERS         SWITCH
#                                                       	PORT    PORT(S) 		DEST            LIMIT           GROUP
ACCEPT		any			any			icmp    8

# Maybe enable for some cases:
#ACCEPT		inet			fw			tcp	22

# for Nextcloud
ACCEPT		dock			fw			tcp	88,139,389,443,445
EOF

  if [ "$fw_logging_policy" = 'outgoing,rejected' ] ; then
    cat <<'EOF'

# for logging
$PUAVO_DEFAULT_LOG_LEVEL        ltsp    inet
$PUAVO_DEFAULT_LOG_LEVEL        wlan    inet
EOF
  fi
} > "${target_dir}/rules.tmp"
mv "${target_dir}/rules.tmp" "${target_dir}/rules"

# -- snat
cat <<EOF > "${target_dir}/snat.tmp"
#ACTION         SOURCE          DEST            PROTO   PORT   IPSEC  MARK   USER    SWITCH  ORIGDEST   PROBABILITY
$(for iface in $dhcpd_interfaces; do
    echo "MASQUERADE	$(iface_to_network_cidr "$iface")	inet0"
    echo "MASQUERADE	$(iface_to_network_cidr "$iface")	vpn0"
  done)
EOF
mv "${target_dir}/snat.tmp" "${target_dir}/snat"

# -- zones
cat <<EOF > "${target_dir}/zones.tmp"
#ZONE   TYPE    OPTIONS                 IN                      OUT
#                                       OPTIONS                 OPTIONS
fw      firewall
dock	ipv4		# Docker network
inet    ipv4		# Internet
ltsp    ipv4		# LTSP network(s)
ovpn    ipv4		# OpenVPN for server administration
wlan    ipv4		# WLAN network(s)
EOF
mv "${target_dir}/zones.tmp" "${target_dir}/zones"
