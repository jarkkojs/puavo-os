#!/bin/sh

set -eu

logmsg() { logger -t puavo-send-sysinfo-to-puavo "$@"; }

delete_network_interfaces() {
  # delete network interface info but keep vpn0 info so that
  # we can see if host has such a thing functioning
  printf %s "$1" \
    | jq '.network_interfaces =
            (.network_interfaces[] | select(.name == "vpn0"))'
}

status=0

background_mode=false
if [ "${1:-}" = '--background-mode' ]; then
  background_mode=true
fi

if $background_mode; then
  sleep 300
fi

read my_hostname < /etc/puavo/hostname

# XXX get rid of hosttype handling
puavo_hosttype=$(puavo-conf puavo.hosttype)
if [ "$puavo_hosttype" = 'bootserver' ]; then
  url="/v3/boot_servers/${my_hostname}/sysinfo"
else
  url="/v3/devices/${my_hostname}/sysinfo"
fi

if [ -r /etc/puavo/ldap/dn -a -r /etc/puavo/ldap/password ]; then
  prr_args='--user-etc --writable'
else
  prr_args='--user-bootserver'
fi

while true; do
  if ! sysinfo_json=$(
    dbus-send --system --dest=org.puavo.client.systeminfocollectordaemon \
              --print-reply=literal /systeminfocollector \
              org.puavo.client.systeminfocollector.CollectSysinfo); then
    logmsg -p user.err 'could not get sysinfo from sysinfocollector'
  else
    tmpfile=$(mktemp /tmp/puavo-send-sysinfo-to-puavo.XXXXXX)
    if ! delete_network_interfaces "$sysinfo_json" > "$tmpfile"; then
      logmsg -p user.err 'could not filter out network interfaces info'
    else
      if ! puavo-rest-request "$url" $prr_args \
                              -- -F "sysinfo=<$tmpfile" >/dev/null; then
        logmsg -p user.err 'sending sysinfo to puavo failed'
        status=1
      else
        logmsg -p user.info 'sysinfo sent to puavo successfully'
        status=0
      fi
    fi
    rm -f "$tmpfile"
  fi

  if ! $background_mode; then
    break
  fi

  # Send device information after every four hours.  This means
  # active device hours, not the ones this device is in suspended state.
  # This could be a bit smarter, guaranteeing once a day or more often.
  sleep 14400
done

exit $status
