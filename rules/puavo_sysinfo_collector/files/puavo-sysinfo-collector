#!/usr/bin/ruby

# DBus service to collect some system information on-demand.
# Version 0.99, (c) Opinsys Oy 2017-2021
# Author: Jarmo Pietil√§inen (jarmo@opinsys.fi)

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Why, yes, this is my first DBus service ever, can you tell?

require 'dbus'
require 'etc'
require 'json'
require 'facter'
require 'open3'
require 'sys/proctable'

def lookup_free_space(fs_path)
  begin
    return nil unless system('mountpoint', '-q', fs_path)

    blocksize, status = Open3.capture2('stat', '-f', '-c', '%S', fs_path)
    raise 'error running stat for blocksize' unless status.success?
    free_blocks, status = Open3.capture2('stat', '-f', '-c', '%a', fs_path)
    raise 'error running stat for free blocks' unless status.success?

    return (blocksize.to_i * free_blocks.to_i)

  rescue StandardError => e
    warn "could not lookup free space for #{ fs_path }: #{ e.message }"
  end

  return nil
end

def lookup_xrandr()
  displays = {}

  Sys::ProcTable.ps.each do |p|
    disp = p.environ['DISPLAY']
    xauthority = p.environ['XAUTHORITY']
    next unless disp && xauthority
    next if displays[disp]
    displays[disp] = xauthority
  end

  last_display = displays.keys.sort.last
  return '' unless last_display

  xauthority = displays[last_display]
  cmd_env = { 'DISPLAY' => last_display, 'XAUTHORITY' => xauthority }
  IO.popen([ cmd_env, 'xrandr', '-q' ]) do |io|
    return io.read
  end
end

class SystemInfoCollector < DBus::Object
  dbus_interface 'org.puavo.client.systeminfocollector' do
    dbus_method :CollectSysinfo, 'out ret:s' do
      begin
        # Clear Facter cache and memory at the start of every run.
        Facter.clear

        # These symbols are also used verbatim in the JavaScript code, so
        # changing them willy-nilly will have disastrous consequences
        values = [
          :kernelrelease,
          :bios_vendor,
          :bios_version,
          :bios_release_date,
          :processorcount,
          :processor0,
          :memorysize_mb,
          :manufacturer,
          :productname,
          :serialnumber,
          :boardserialnumber,
        ]

        netmasks = {
          '128.0.0.0' => 1, '255.128.0.0' => 9,  '255.255.128.0' => 17, '255.255.255.128' => 25,
          '192.0.0.0' => 2, '255.192.0.0' => 10, '255.255.192.0' => 18, '255.255.255.192' => 26,
          '224.0.0.0' => 3, '255.224.0.0' => 11, '255.255.224.0' => 19, '255.255.255.224' => 27,
          '240.0.0.0' => 4, '255.240.0.0' => 12, '255.255.240.0' => 20, '255.255.255.240' => 28,
          '248.0.0.0' => 5, '255.248.0.0' => 13, '255.255.248.0' => 21, '255.255.255.248' => 29,
          '252.0.0.0' => 6, '255.252.0.0' => 14, '255.255.252.0' => 22, '255.255.255.252' => 30,
          '254.0.0.0' => 7, '255.254.0.0' => 15, '255.255.254.0' => 23, '255.255.255.254' => 31,
          '255.0.0.0' => 8, '255.255.0.0' => 16, '255.255.255.0' => 24, '255.255.255.255' => 32
        }

        data = {}

        begin
          # timestamp (so we know how old this information is)
          data[:timestamp] = Time.now.to_i

          # release info
          data[:this_image]   = IO.read('/etc/puavo-image/name').strip rescue '?'
          data[:this_release] = IO.read('/etc/puavo-image/release').strip rescue '?'

          # facter stuff
          values.each { |f| data[f] = Facter.value(f) }

          # network interface addresses
          interfaces = []

          begin
            (Facter.value('interfaces').split(',') || []).each do |i|
              next if i == 'lo'

              ip = Facter.value("ipaddress_#{i}") || '<N/A>'
              mac = Facter.value("macaddress_#{i}") || '<N/A>'
              prefix = Facter.value("netmask_#{i}") || 0
              prefix = netmasks[prefix] if netmasks.include?(prefix)

              interfaces << {
                name: i,
                ip: ip,
                mac: mac,
                prefix: prefix
              }
            end
          rescue StandardError => e
            warn "could not list network interfaces: #{e}"
            interfaces = []
          end

          data[:network_interfaces] = interfaces

          # Hard drive size and model. Find the largest block device, assume
          # it's the "main" storage device and store it under the "sda"
          # moniker for backwards compatibility. Assume all fixed disks are
          # named predictably, like "sda", or "nvme0n1" or even
          # "mmcblk-something".
          begin
            block_devices = Facter.value(:blockdevices)
            block_devices = '' if block_devices.nil?
          rescue StandardError => e
            warn "could not list block_devices: #{e}"
            block_devices = ''
          end

          main_disk_drive = nil
          model = nil
          size = -1

          begin
            block_devices.split(',').each do |this_device|
              next unless this_device.include?('mmcblk')    \
                            || this_device.include?('nvme') \
                            || this_device.include?('sda')

              this_size  = Facter.value("blockdevice_#{this_device}_size").to_i
              this_model = Facter.value("blockdevice_#{this_device}_model")

              if this_size > size
                main_disk_drive = this_device
                model = this_model
                size  = this_size
              end
            end
          rescue StandardError => e
            warn "could not parse device info: #{e}"
            model = nil
            size  = -1
          end

          data[:blockdevice_sda_model] = model || ''
          data[:blockdevice_sda_size]  = (size != -1) ? size : 0

          data[:blockdevice_sda_smart] = nil
          if main_disk_drive then
            begin
              cmd = [ '/usr/sbin/smartctl', '-a', '--json',
                        "/dev/#{ main_disk_drive }" ]
              smartctl_output, status = Open3.capture2(*cmd)
              warn "smartctl returned error code: #{ status.exitstatus }" \
                unless status.success?
              data[:blockdevice_sda_smart] = JSON.parse(smartctl_output)
            rescue StandardError => e
              warn "could not determine smartctl data: #{e}"
            end
          end

          # SSD or spinning platters?
          # FIXME: this obviously fails with NVME disks and SD cards
          # FIXME: why is this a string?
          data[:ssd] = '-1'

          begin
            data[:ssd] = IO.read('/sys/block/sda/queue/rotational').strip == '0' ? '1' : '0'
          rescue StandardError => e
            warn "could not determine if the hard drive is an SSD: #{e}"
            data[:ssd] = '-1'
          end

          data[:uefi] = File.exists?("/sys/firmware/efi")

          # detailed RAM slot info
          data[:memory] = []

          begin
            slot_info = nil

            dmidata = `dmidecode --type 17`

            # parse dmidecode output
            dmidata.split("\n").each do |line|
              if line == 'Memory Device'
                # store the current slot, if any, and start a new one
                data[:memory] << slot_info if slot_info
                slot_info = {}
              elsif line[0] == "\t"
                # parse info lines and store values for the current slot
                parts = line.split(':').map(&:strip)

                if parts.size == 2
                  if parts[0] == 'Size' && parts[1] != 'No Module Installed'
                    slot_info[:size] = parts[1].to_i
                  elsif parts[0] == 'Locator' && parts[1] != 'Not Specified'
                    slot_info[:slot] = parts[1]
                  elsif parts[0] == 'Part Number' && parts[1] != 'Not Specified'
                    slot_info[:product] = parts[1]
                  elsif parts[0] == 'Manufacturer' && parts[1] != 'Not Specified'
                    slot_info[:vendor] = parts[1]
                  end
                end
              end
            end

            # store the last slot
            data[:memory] << slot_info if slot_info
          rescue StandardError => e
            # if the memory info fails, ensure a valid output still exists
            warn "could not parse memory slot information: #{e}"
            data[:memory] = []
          end

          # lspci contents
          data[:lspci_values] = []

          begin
            lspci_raw = %x(lspci)
            lspci_raw.strip.split("\n").each { |i| data[:lspci_values] << i.strip }
          rescue StandardError => e
            warn "could not get lspci output: #{e}"
            data[:lspci_values] = []
          end

          # lsusb contents
          data[:lsusb_values] = []

          begin
            lsusb_raw = %x(lsusb)
            lsusb_raw.strip.split("\n").each { |i| data[:lsusb_values] << i.strip }
          rescue StandardError => e
            warn "could not get lsusb output: #{e}"
            data[:lsusb_values] = []
          end

          # wireless info (this needs to be improved)
          begin
            x = `lspci -nnk | grep 0280 | cut -c 36-`
            data[:wifi] = (x.strip.split("\n").first || '').strip
          rescue StandardError => e
            warn "could not wireless information: #{e}"
            data[:wifi] = nil
          end

          xrandr_output = nil
          begin
            xrandr_output = lookup_xrandr()
          rescue StandardError => e
            warn "could not query xrandr output: #{ e.message }"
          end
          data[:xrandr] = xrandr_output.rstrip if xrandr_output

          battery = {}
          begin
            has_battery = false
            upower_cmd = [ 'upower',
                           '--show-info',
                           '/org/freedesktop/UPower/devices/battery_BAT0' ]
            IO.popen(upower_cmd) do |io|
              io.readlines.each do |line|
                key, value = * line.split(':')
                next unless key.kind_of?(String) && value.kind_of?(String)
                key.strip!
                value.strip!

                if key == 'native-path' && value != '(null)' then
                  has_battery = true
                  next
                end

                next unless has_battery

                accepted_keys = %w(capacity
                                   energy
                                   energy-empty
                                   energy-full
                                   energy-full-design
                                   model
                                   percentage
                                   serial
                                   state
                                   technology
                                   vendor
                                   voltage
                                   warning-level)

                battery[key] = value if accepted_keys.include?(key)
              end
            end
          rescue StandardError => e
            warn "could not query battery information: #{ e.message }"
          end
          data[:battery] = battery unless battery.empty?

          # contains version information on Abitti-version or some other such
          # extra contents
          extra_system_contents = {}
          begin
            esc_path = '/var/lib/puavo-desktop/extra_system_contents.json'
            extra_system_contents = JSON.parse( IO.read(esc_path) )
          rescue StandardError => e
            warn "could not query extra system contents: #{ e.message }"
          end
          data[:extra_system_contents] = extra_system_contents

          begin
            free_space = {}
            fs_paths = %w(/home /imageoverlays /images /installimages /state /tmp)
            fs_paths.each do |fs_path|
              free_space_for_fs_path = lookup_free_space(fs_path)
              free_space[fs_path] = free_space_for_fs_path \
                if free_space_for_fs_path
            end
            data[:free_space] = free_space
          rescue StandardError => e
            warn "could not get disk free space information: #{e}"
            data[:free_space] = {}
          end
        rescue
        end

        # Windows license information (not always available, so fail gracefully)
        data[:windows_license] = nil

        begin
          if File.exists?('/sys/firmware/acpi/tables/MSDM')
            data[:windows_license] = `strings /sys/firmware/acpi/tables/MSDM`
          end
        rescue StandardError => e
          warn "could not read the Windows license file: #{e}"
          data[:windows_license] = nil
        end

        # SKU number (not available on all machines)
        data[:sku] = nil

        begin
          data[:sku] = File.read('/sys/devices/virtual/dmi/id/product_sku').strip
        rescue StandardError => e
          warn "could not read the SKU number: #{e}"
          data[:sku] = nil
        end

        # use pretty_generate because humans might read the file out of curiosity
        File.open('/run/puavo/puavo-sysinfo.json', 'w') do |f|
          f.write(JSON.pretty_generate(data))
        end

        # return the raw data to the caller directly
        out = JSON.generate(data)
      rescue StandardError => e
        # ensure we return valid data in all cases
        out = '{}'
      end
    end
  end
end

# create the service...
bus = DBus::SystemBus.instance
service = bus.request_service('org.puavo.client.systeminfocollectordaemon')
service.export(SystemInfoCollector.new('/systeminfocollector'))

# ...and start it
mainloop = DBus::Main.new
mainloop << bus
mainloop.run
