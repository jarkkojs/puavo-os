#!/usr/bin/python3

import sys

import gi
gi.require_version('Gdk', '3.0')
gi.require_version('Gtk', '3.0')
gi.require_version('WebKit2', '4.1')
from gi.repository import Gdk, Gtk, WebKit2

CSS = b"""
#request_uri {
  font-size: 200%;
}
"""

style_provider = Gtk.CssProvider()
style_provider.load_from_data(CSS)

Gtk.StyleContext.add_provider_for_screen(
    Gdk.Screen.get_default(),
    style_provider,
    Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION,
)


class UriRequestDialog():
  def __init__(self, exam_browser):
    self.exam_browser = exam_browser


  def setup(self):
    self.alignment = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0, name='request_uri')
    self.vbox = Gtk.Box()
    self.address_label = Gtk.Label.new('Exam server:')
    self.address_entry = Gtk.Entry()
    self.address_entry.set_width_chars(40)
    self.address_entry.connect('activate', self.on_change_uri)
    self.go_button = Gtk.Button.new_with_label('Go')
    self.go_button.connect('clicked', self.on_change_uri)

    self.vbox.pack_start(self.address_label, False, False, 10)
    self.vbox.pack_start(self.address_entry, False, False, 10)
    self.vbox.pack_start(self.go_button,     False, False, 10)
    self.alignment.add(self.vbox)

    self.exam_browser.win.add(self.alignment)
    self.exam_browser.win.show_all()


  def on_change_uri(self, widget):
    uri = self.address_entry.get_text()
    self.exam_browser.try_uri(uri)


  def remove(self):
    self.alignment.destroy()


class PuavoExamBrowser():
  def __init__(self, uri):
    self.win = Gtk.Window()


  def setup_ui(self, uri):
    self.win.connect('destroy', Gtk.main_quit)

    self.win.set_title('Puavo Exam Browser')
    self.win.set_position(Gtk.WindowPosition.CENTER)
    self.win.set_size_request(640, 480)
    self.win.maximize()

    self.webview = WebKit2.WebView()
    self.disable_cert_checks()  # XXX perhaps not okay?
    self.webview.connect('load-changed', self.on_load_changed)
    self.webview.connect('load-failed',  self.on_load_failed)

    self.load_failed        = True
    self.uri_request_dialog = None
    self.webview_shown      = False

    # if a fullscreen is good, how to control it on/off?
    # XXX self.fullscreen()

    if uri == '':
      self.uri_request_dialog = UriRequestDialog(exam_browser)
      self.uri_request_dialog.setup()
    else:
      self.load_failed = False
      self.webview.load_uri(uri)


  def try_uri(self, uri):
    self.load_failed = False
    self.webview.load_uri(uri)


  def on_load_failed(self, widget, load_event, failing_uri, error):
    self.load_failed = True
    return True


  def on_load_changed(self, widget, load_event):
    if load_event != WebKit2.LoadEvent.FINISHED:
      return True

    if self.load_failed:
      return True

    if self.uri_request_dialog:
      self.uri_request_dialog.remove()
      self.uri_request_dialog = None

    if not self.webview_shown:
      self.win.add(self.webview)
      self.win.show_all()
      self.webview_shown = True

    return True


  # XXX is this okay?
  def disable_cert_checks(self):
    web_context = self.webview.get_context()
    web_context.set_tls_errors_policy(WebKit2.TLSErrorsPolicy.IGNORE)


uri = ''
if len(sys.argv) == 2:
    uri = sys.argv[1]

Gtk.init(sys.argv)
exam_browser = PuavoExamBrowser(uri)
exam_browser.setup_ui(uri)
Gtk.main()
