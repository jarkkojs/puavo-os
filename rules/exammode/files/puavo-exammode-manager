#!/usr/bin/ruby

require 'dbus'
require 'json'
require 'puavo/conf'
require 'syslog'

EXAMUSER_UID = 990
EXAMUSER_USERNAME = 'puavo-examuser'

puavoconf = Puavo::Conf.new
$examomatic_url = puavoconf.get('puavo.exammode.examomatic.url')
puavoconf.close

class ExamsListener
  def initialize(dbus, username, krb5ccname)
    @dbus = dbus
    @available_exams = []
    @listener = Thread.new { connect_and_wait(username, krb5ccname) }
  end

  def destroy
    @listener.exit
  end

  def connect_and_wait(username, krb5ccname)
    Syslog.log(Syslog::LOG_NOTICE, 'connecting websocket to %s',
               $examomatic_url)
    # XXX should open a websocket to $exammomatic_url
    # XXX using username + krb5ccname and then receive current_exam from there
    loop do
      current_exams = [ { 'url' => 'https://localhost:7777' } ]
      if @available_exams != current_exams then
        @dbus.ExamsAvailable(current_exams.to_json)
        @available_exams = current_exams
      end
    end
  end
end

class PuavoExammode < DBus::Object
  def initialize(*args)
    @exams_listener = nil
    super
  end

  dbus_interface 'org.puavo.Exam.exammode' do
    dbus_signal :ExamsAvailable, 'in exams:s'

    dbus_method :Register, 'in username:s, in locale:s, in krb5ccname:s' do
      |username, locale, krb5ccname|
        @username   = username
        @locale     = locale
        @krb5ccname = krb5ccname

        Syslog.log(Syslog::LOG_NOTICE, 'user %s (locale=%s) registered',
                   username, locale)

        @exams_listener.destroy if @exams_listener
        @exams_listener = ExamsListener.new(self, @username, $krb5ccname)
    end

    dbus_method :StartSession, '' do
      if ! system('loginctl', 'lock-sessions') then
        Syslog.log(Syslog::LOG_ERR, 'could not lock desktop sessions')
        raise 'error in locking sessions'
      end
      sleep 3   # give time for gnome lock to activate (XXX sleep is not nice)

      begin
        desktop_session_vt = %x(fgconsole).chomp
        raise 'vt empty' if desktop_session_vt.empty?
      rescue StandardError => e
        errmsg = 'could not determine the current virtual console'
        Syslog.log(Syslog::LOG_ERR, errmsg)
        raise errmsg
      end

      if @exammode_session then
        Syslog.log(Syslog::LOG_ERR,
          'tried to activate examination mode when it is already active')
        raise 'exammode session is already active'
      end

      @exammode_session = Thread.new do
        Syslog.log(Syslog::LOG_NOTICE, 'activating examination mode')
        begin
          # use restart in case it is active but not through us
          if ! system('systemctl', 'restart', 'puavo-exammode-tty.service') then
            Syslog.log(Syslog::LOG_ERR, 'error in activating examination mode')
            raise 'could not start puavo-exammode session'
          end

          Syslog.log(Syslog::LOG_INFO, 'examination mode ended')

          if ! system('chvt', desktop_session_vt) then
            Syslog.log(Syslog::LOG_ERR, 'could not switch back to original vt')
            raise 'could not return back to the original vt'
          end
        ensure
          @exammode_session = nil
        end
      end
    end
  end
end

Syslog.open(File.basename($0), Syslog::LOG_CONS)

begin
  bus = DBus::SystemBus.instance
  service = bus.request_service('org.puavo.Exam')
  service.export( PuavoExammode.new('/exammode') )

  mainloop = DBus::Main.new
  mainloop << bus
  mainloop.run
rescue StandardError => e
  Syslog.log(Syslog::LOG_ERR,
             'Error when running puavo-exammode-manager dbus service: %s',
             e.message)
end

Syslog.close()
