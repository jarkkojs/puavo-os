#!/bin/sh

set -eu

puavo_conf() {
  # If the puavo-conf database does not exist, we must be in image building
  # phase and can not run puavo-conf.  Because this script can be run
  # during image build, we need to use this trick.
  if [ ! -e /run/puavo/conf.db ]; then
    return 0
  fi

  puavo-conf "$@"
}

get_nonunique_pwa_list() {
  local browser puavoconf_value pwa_browser status
  browser=$1

  status=0

  for pwa_path in /var/lib/puavo-pwa/*; do
    test -d "$pwa_path" || continue
    pwa_browser=$(cat "${pwa_path}/browser" 2>/dev/null || true)
    if [ -z "$pwa_browser" -o "$pwa_browser" = "$browser" ]; then
      cat "${pwa_path}/url" 2>/dev/null || status=1
    fi
  done

  if puavoconf_value=$(puavo_conf puavo.www.chromium.pwa.forcelist); then
    if [ -n "$puavoconf_value" ]; then
      printf "%s\n" "$puavoconf_value" | xargs -n 1
    fi
  else
    status=1
  fi

  return $status
}

get_pwa_list() {
  local pwa_list status
  status=0
  pwa_list=$(get_nonunique_pwa_list "$@") || status=1
  printf %s "$pwa_list" | sort | uniq || return 1
  return $status
}

write_pwa_conf() {
  local conf_path pwa_list
  pwa_list=$1
  conf_path=$2

  if [ -z "$pwa_list" ]; then
    rm -f "$conf_path"
    return 0
  fi

  jq --null-input --arg pwa_list "$pwa_list" '
    .WebAppInstallForceList =
      ($pwa_list | split("\n")
        | map({ url: . } | .default_launch_container = "window"))
  ' > "${conf_path}.tmp"
  mv "${conf_path}.tmp" "$conf_path"
}

status=0

chromium_config=$(puavo_conf puavo.www.chromium.config)
chromium_extensions=$(puavo_conf puavo.www.chromium.extensions)

chromium_pwa_list=$(get_pwa_list chromium) || status=1
chrome_pwa_list=$(  get_pwa_list chrome  ) || status=1

chromium_dir="/etc/chromium/policies/managed"
chrome_dir="/etc/opt/chrome/policies/managed"

api_server=$(puavo-conf puavo.www.apiserver)
nextcloud_topdomain=$(puavo-conf puavo.nextcloud.topdomain)

if [ -n "$api_server" -o -n "$nextcloud_topdomain" ]; then
  if [ -n "$nextcloud_topdomain" ]; then
    nextcloud_topdomain="https://.${nextcloud_topdomain}"
  fi
  jq --null-input --arg api_server "$api_server" \
                  --arg nextcloud_topdomain "$nextcloud_topdomain" '
    [ $api_server, $nextcloud_topdomain ] | map(select(. != "")) | join(",")
      | { "AuthNegotiateDelegateAllowlist": ., "AuthServerAllowlist": . }
  ' > /etc/chromium/policies/managed/puavo-sso.json.tmp
  mv /etc/chromium/policies/managed/puavo-sso.json.tmp \
     /etc/chromium/policies/managed/puavo-sso.json
  ln -fns /etc/chromium/policies/managed/puavo-sso.json \
          /etc/opt/chrome/policies/managed/puavo-sso.json
else
  rm -f /etc/chromium/policies/managed/puavo-sso.json \
        /etc/opt/chrome/policies/managed/puavo-sso.json
fi

if [ -n "$chromium_config" ]; then
  printf "%s\n" "$chromium_config" > "${chromium_dir}/puavo-conf.json.tmp"
  mv "${chromium_dir}/puavo-conf.json.tmp" "${chromium_dir}/puavo-conf.json"
  ln -fns "${chromium_dir}/puavo-conf.json" "${chrome_dir}/puavo-conf.json"
else
  rm -f "${chromium_dir}/puavo-conf.json" "${chrome_dir}/puavo-conf.json"
fi

if [ -n "$chromium_extensions" ]; then
  jq --null-input --arg extensions "$chromium_extensions" '
    .ExtensionInstallForcelist =
      ($extensions | split(" ") | map(. + ";https://clients2.google.com/service/update2/crx"))
  ' > "${chromium_dir}/extension_install_forcelist.json.tmp"
  mv "${chromium_dir}/extension_install_forcelist.json.tmp" \
     "${chromium_dir}/extension_install_forcelist.json"
  ln -fns "${chromium_dir}/extension_install_forcelist.json" \
          "${chrome_dir}/extension_install_forcelist.json"
else
  rm -f "${chromium_dir}/extension_install_forcelist.json" \
        "${chrome_dir}/extension_install_forcelist.json"
fi

write_pwa_conf "$chromium_pwa_list" "${chromium_dir}/puavo-pwa-forcelist.json" \
  || status=1
write_pwa_conf "$chrome_pwa_list" "${chrome_dir}/puavo-pwa-forcelist.json" \
  || status=1

exit $status
